<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[异步消息处理机制相关面试问题]]></title>
      <url>/2018/02/14/%E5%BC%82%E6%AD%A5%E6%B6%88%E6%81%AF%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>Handler、Asynctask、HandlerThread、Intentservice<br><a id="more"></a></p>
<h1 id="Handler面试详解"><a href="#Handler面试详解" class="headerlink" title="Handler面试详解"></a>Handler面试详解</h1><h3 id="一-什么是Handler"><a href="#一-什么是Handler" class="headerlink" title="一. 什么是Handler"></a>一. 什么是Handler</h3><p>Handler通过发送和处理Message和Runnable对象来关联相应线程的MessageQueue</p>
<ol>
<li><p>可以让对应的Message和Runnable在未来的某个时间点进行相应处理</p>
</li>
<li><p>让自己想要处理的耗时操作放在子线程里，让更新UI的操作放在主线程</p>
</li>
</ol>
<h3 id="二-Handler的使用方法"><a href="#二-Handler的使用方法" class="headerlink" title="二. Handler的使用方法"></a>二. Handler的使用方法</h3><ol>
<li><p>post(runnable)</p>
</li>
<li><p>sendMessage(message)</p>
</li>
</ol>
<h3 id="三-Handler机制的原理"><a href="#三-Handler机制的原理" class="headerlink" title="三. Handler机制的原理"></a>三. Handler机制的原理</h3><h3 id="四-Handler引起的内存泄漏以及解决办法"><a href="#四-Handler引起的内存泄漏以及解决办法" class="headerlink" title="四. Handler引起的内存泄漏以及解决办法"></a>四. Handler引起的内存泄漏以及解决办法</h3><p>原因：静态内部类持有外部类的匿名引用，导致外部Activity无法释放</p>
<p>解决办法：Handler内部持有外部Activity的弱引用，并把Handler改为静态内部类，在Activity的onDestroy中使用mHandler.removeCallback()</p>
<h1 id="AsyncTask面试详解"><a href="#AsyncTask面试详解" class="headerlink" title="AsyncTask面试详解"></a>AsyncTask面试详解</h1><h3 id="一-什么是AsyncTask"><a href="#一-什么是AsyncTask" class="headerlink" title="一. 什么是AsyncTask"></a>一. 什么是AsyncTask</h3><p>它本质上就是一个封装了线程池和Handler的异步框架</p>
<h3 id="二-AsyncTask的使用方法"><a href="#二-AsyncTask的使用方法" class="headerlink" title="二. AsyncTask的使用方法"></a>二. AsyncTask的使用方法</h3><ol>
<li><p>三个参数</p>
</li>
<li><p>五个方法</p>
</li>
</ol>
<h3 id="三-AsyncTask内部原理"><a href="#三-AsyncTask内部原理" class="headerlink" title="三. AsyncTask内部原理"></a>三. AsyncTask内部原理</h3><ol>
<li><p>AsyncTask的本质是一个静态的线程池，AsyncTask派生出的子类实现不同的异步任务，这些任务都是提交到静态的线程池中执行</p>
</li>
<li><p>线程池中的工作线程执行doInBackground(mParams)方法执行异步任务</p>
</li>
<li><p>当任务状态改变后，工作线程会向UI线程发送消息，AsyncTask内部的InternalHandler响应这些消息，并调用相关的回调函数</p>
</li>
</ol>
<h3 id="四-AsyncTask的注意事项"><a href="#四-AsyncTask的注意事项" class="headerlink" title="四. AsyncTask的注意事项"></a>四. AsyncTask的注意事项</h3><ol>
<li><p>内存泄漏</p>
</li>
<li><p>生命周期</p>
</li>
<li><p>结果丢失</p>
</li>
<li><p>并行or串行</p>
</li>
</ol>
<h1 id="HandlerThread面试详解"><a href="#HandlerThread面试详解" class="headerlink" title="HandlerThread面试详解"></a>HandlerThread面试详解</h1><h3 id="一-HandlerThread是什么"><a href="#一-HandlerThread是什么" class="headerlink" title="一. HandlerThread是什么"></a>一. HandlerThread是什么</h3><p>开启Thread子线程进行耗时操作</p>
<p>多次创建和销毁线程是很消耗系统资源的</p>
<p>Handler + Thread + Looper</p>
<p>是一个Thread内部有Looper</p>
<ul>
<li><p>HandlerThread本质上是一个线程类，它继承了Thread</p>
</li>
<li><p>HandlerThread有自己的内部Looper对象，可以进行Looper循环</p>
</li>
<li><p>通过获取HandlerThread的Looper对象传递给Handler对象，可以在HandlerMessage方法中执行异步任务</p>
</li>
<li><p>优点是不会有阻塞，减少了对性能的消耗，缺点是不能同时进行多任务的处理，需要等待进行处理，处理效率较低</p>
</li>
<li><p>与线程池注重并发不同，HandlerThread是一个串行队列，HandlerThread背后只有一个线程</p>
</li>
</ul>
<h3 id="二-HandlerThread源码解析"><a href="#二-HandlerThread源码解析" class="headerlink" title="二. HandlerThread源码解析"></a>二. HandlerThread源码解析</h3>]]></content>
      
        <categories>
            
            <category> 面试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android基础相关面试问题]]></title>
      <url>/2018/02/12/Android%E5%9F%BA%E7%A1%80%E7%9B%B8%E5%85%B3%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>Activity、Fragment、Service、BroadcastReceiver、WebView、Binder<br><a id="more"></a></p>
<h1 id="Activity面试详解"><a href="#Activity面试详解" class="headerlink" title="Activity面试详解"></a>Activity面试详解</h1><h3 id="一-Activity生命周期"><a href="#一-Activity生命周期" class="headerlink" title="一. Activity生命周期"></a>一. Activity生命周期</h3><ol>
<li><p>Activity的四种状态<br>Running/Paused/Stopped/Killed</p>
</li>
<li><p>Activity生命周期</p>
<ul>
<li>Activity启动 -&gt; onCreate() -&gt; onStart() -&gt; onResume()</li>
<li>点击Home键回到主界面(Activity不可见) -&gt; onPause() -&gt; onStop()</li>
<li>当再次回到原Activity时 -&gt; onRestar() -&gt; onStar() -&gt; onResume()</li>
<li>退出当前Activity时 -&gt; onPause() -&gt; onStop() -&gt; onDestroy()</li>
</ul>
</li>
<li><p>Android进程优先级<br>前台/可见/服务/后台/空</p>
</li>
</ol>
<h3 id="二-Activity任务栈"><a href="#二-Activity任务栈" class="headerlink" title="二. Activity任务栈"></a>二. Activity任务栈</h3><h3 id="三-Activity启动模式"><a href="#三-Activity启动模式" class="headerlink" title="三. Activity启动模式"></a>三. Activity启动模式</h3><ol>
<li><p>standard</p>
</li>
<li><p>singleTop</p>
</li>
<li><p>singleTask</p>
</li>
<li><p>singleInstance</p>
</li>
</ol>
<h3 id="四-Scheme跳转协议"><a href="#四-Scheme跳转协议" class="headerlink" title="四. Scheme跳转协议"></a>四. Scheme跳转协议</h3><p>android中的scheme是一种页面内跳转协议，是一种非常好的实现机制，通过定义自己的scheme协议，可以非常方便跳转App中的各个页面；通过Scheme协议，服务器可以定制化告诉App跳转哪个页面，可以通过通知栏消息定制化跳转页面，可以通过H5页面跳转页面等。</p>
<h1 id="Fragment面试详解"><a href="#Fragment面试详解" class="headerlink" title="Fragment面试详解"></a>Fragment面试详解</h1><h3 id="一-Fragment为什么被称为第五大组件"><a href="#一-Fragment为什么被称为第五大组件" class="headerlink" title="一. Fragment为什么被称为第五大组件"></a>一. Fragment为什么被称为第五大组件</h3><ol>
<li><p>Fragment为什么被称为第五大组件</p>
</li>
<li><p>Fragemnt加载到Activity的两种方式</p>
<ul>
<li>添加Fragment到Activity的布局文件当中</li>
<li>动态在Activity中添加Fragment</li>
</ul>
</li>
<li><p>FragmentPagerAdapter与FragmentStatePagerAdapter区别</p>
</li>
</ol>
<h3 id="二-Fragment的生命周期"><a href="#二-Fragment的生命周期" class="headerlink" title="二. Fragment的生命周期"></a>二. Fragment的生命周期</h3><ol>
<li><p>Fragment的生命周期</p>
</li>
<li><p>Fragment从启动到销毁生命周期的全过程<br><img src="http://7xslu7.com1.z0.glb.clouddn.com/Fragment%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt=""></p>
</li>
</ol>
<h3 id="三-Fragment之间的通信"><a href="#三-Fragment之间的通信" class="headerlink" title="三. Fragment之间的通信"></a>三. Fragment之间的通信</h3><ol>
<li><p>在Fragment中调用Activity中的方法 getActivity</p>
</li>
<li><p>在Activity中调用Fragment中的方法 接口回调</p>
</li>
<li><p>在Fragment中调用Fragment中的方法 findFragmentById</p>
</li>
</ol>
<h3 id="四-Fragment管理器：FragmentManager"><a href="#四-Fragment管理器：FragmentManager" class="headerlink" title="四. Fragment管理器：FragmentManager"></a>四. Fragment管理器：FragmentManager</h3><ol>
<li>Fragment的replace、add、remove方法</li>
</ol>
<h1 id="Service面试详解"><a href="#Service面试详解" class="headerlink" title="Service面试详解"></a>Service面试详解</h1><h3 id="一-Service的应用场景，以及和Thread区别"><a href="#一-Service的应用场景，以及和Thread区别" class="headerlink" title="一. Service的应用场景，以及和Thread区别"></a>一. Service的应用场景，以及和Thread区别</h3><ol>
<li><p>Service是什么<br>Serviec是一个可以在后台执行长时间运行操作而没有用户界面的应用组件。</p>
</li>
<li><p>Service和Thread的区别</p>
<ul>
<li>定义</li>
<li>实际开发</li>
<li>应用场景</li>
</ul>
</li>
</ol>
<h3 id="二-开启Service的两种方式以及区别"><a href="#二-开启Service的两种方式以及区别" class="headerlink" title="二. 开启Service的两种方式以及区别"></a>二. 开启Service的两种方式以及区别</h3><ol>
<li><p>startService</p>
<ul>
<li>定义一个类继承Service</li>
<li>在Manifest.xml文件中配置该Service</li>
<li>使用Context的startService(Intent)方法启动该Service</li>
<li>不再使用时，调用stopService(Intent)方法停止该服务</li>
</ul>
</li>
<li><p>bindService</p>
<ul>
<li>创建BindService服务端，继承自Service并在类中创建一个实现IBinder接口的实例对象并提供公共方法给客户端调用</li>
<li>从onBind()回调方法返回此Binder实例</li>
<li>在客户端中，从onServiceConnected()回调方法接收Binder，并使用提供的方法调用绑定服务</li>
</ul>
</li>
</ol>
<h1 id="BroadcastReceiver面试详解"><a href="#BroadcastReceiver面试详解" class="headerlink" title="BroadcastReceiver面试详解"></a>BroadcastReceiver面试详解</h1><h3 id="一-广播"><a href="#一-广播" class="headerlink" title="一. 广播"></a>一. 广播</h3><ol>
<li><p>广播的定义<br>在Android中，Broadcast是一种广泛运用在应用程序之间传输信息的机制，Android中我们要发送的广播内容是一个Intent，这个Intent中可以携带我们要传送的数据。</p>
</li>
<li><p>广播的场景</p>
<ul>
<li>同一App具有多个进程的不同组件之间的消息通信</li>
<li>不同App之间的消息通信</li>
</ul>
</li>
<li><p>广播的种类</p>
<ul>
<li>Normal Broadcast：Context.sendBroadcast</li>
<li>System Broadcast：Context.sendOrderedBroadcast</li>
<li>Local Broadcast：只在自身App内传播</li>
</ul>
</li>
</ol>
<h3 id="二-实现广播-receiver"><a href="#二-实现广播-receiver" class="headerlink" title="二. 实现广播-receiver"></a>二. 实现广播-receiver</h3><ol>
<li><p>静态注册：注册完成就一直运行</p>
</li>
<li><p>动态注册：跟随Activity的生命周期</p>
</li>
</ol>
<h3 id="三-广播实现机制"><a href="#三-广播实现机制" class="headerlink" title="三. 广播实现机制"></a>三. 广播实现机制</h3><ol>
<li><p>自定义广播接收者BroadcastReceiver，并复写onReceive()方法</p>
</li>
<li><p>通过Binder机制向AMS(Activity Manager Service)进行注册</p>
</li>
<li><p>广播发送者通过Binder机制向AMS发送广播</p>
</li>
<li><p>AMS查找符合相应条件（IntentFilter/Permission等）的BroadcastReceiver，将广播发送BroadcastReceiver（一般情况下是Activity）相应的消息循环队列中</p>
</li>
<li><p>消息循环执行拿到此广播，回调BroadcastReceiver中的onReceive()方法</p>
</li>
</ol>
<h3 id="四-LocalBroadcastReceiver详解"><a href="#四-LocalBroadcastReceiver详解" class="headerlink" title="四. LocalBroadcastReceiver详解"></a>四. LocalBroadcastReceiver详解</h3><ol>
<li><p>使用它发送的广播将只在自身App内传播，因此你不必担心泄露隐私数据</p>
</li>
<li><p>其他App无法对你的App发送广播，因为你的App根本就不可能接收到非自身应用发送的该广播，因此你不必担心有安全漏洞可以利用</p>
</li>
<li><p>比系统的全局广播更加高效</p>
<ul>
<li>LocalBroadcastReceiver高效的原因主要是因为它内部是通过Handler实现的，它的sendBroadcast()方法含义并非和我们平时所用的一样，它的sendBroadcast()方法其实是通过Handler发送一个Message实现的</li>
<li>既然它内部是通过Handler来实现广播的发送，那么相比与系统广播通过Binder实现那肯定是更高效了，同时使用Handler来实现，别的应用无法向我们的应用发送该广播，而我们应用内发送的广播也不会离开我们的应用</li>
<li>LocalBroadcastManager内部协作主要是靠这两个Map集合：mReceivers和mActions，当然还有一个List集合mPendingBroadcasts，这个主要是存储待接收的广播对象</li>
</ul>
</li>
</ol>
<h1 id="WebViwe面试详解"><a href="#WebViwe面试详解" class="headerlink" title="WebViwe面试详解"></a>WebViwe面试详解</h1><h3 id="一-WebView常见的一些坑"><a href="#一-WebView常见的一些坑" class="headerlink" title="一. WebView常见的一些坑"></a>一. WebView常见的一些坑</h3><ol>
<li><p>Android API level 16以及之前的版本存在远程代码执行安全漏洞，该漏洞源于程序没有正确限制使用WebView.addJavascriptInterface方法，远程攻击者可通过使用Java Reflection API利用该漏洞执行任意Java对象的方法</p>
</li>
<li><p>WebView在布局文件中的使用：WebView写在其他容器中</p>
</li>
<li><p>jsbridge</p>
</li>
<li><p>webViewClient.onPageFinished -&gt; webChromeClient.onProgressChanged</p>
</li>
<li><p>后台耗电</p>
</li>
<li><p>WebView硬件加速导致页面渲染问题</p>
</li>
</ol>
<h3 id="二-关于WebView的内存泄漏问题"><a href="#二-关于WebView的内存泄漏问题" class="headerlink" title="二. 关于WebView的内存泄漏问题"></a>二. 关于WebView的内存泄漏问题</h3><ol>
<li><p>独立进程，简单暴力，不过可能涉及到进程间通信</p>
</li>
<li><p>动态添加WebView，对传入WebView中使用的Content使用弱引用，动态添加WebView意思在布局创建个ViewGroup用来放置WebView，Activity创建时add进来，在Activity停止时remove掉</p>
</li>
</ol>
<h1 id="Binder面试详解"><a href="#Binder面试详解" class="headerlink" title="Binder面试详解"></a>Binder面试详解</h1><h3 id="一-Linux内核的基础知识"><a href="#一-Linux内核的基础知识" class="headerlink" title="一. Linux内核的基础知识"></a>一. Linux内核的基础知识</h3><ol>
<li><p>进程隔离/虚拟地址空间</p>
</li>
<li><p>系统调用</p>
</li>
<li><p>Binder驱动</p>
</li>
</ol>
<h3 id="二-Binder通信机制介绍"><a href="#二-Binder通信机制介绍" class="headerlink" title="二. Binder通信机制介绍"></a>二. Binder通信机制介绍</h3><ol>
<li><p>为什么使用Binder</p>
<ul>
<li>Android使用Linux内核拥有着非常多的跨进程通信机制</li>
<li>性能</li>
<li>安全</li>
</ul>
</li>
<li><p>Binder通信模型</p>
<ul>
<li>通讯录：Binder驱动</li>
<li>电话基站：ServiceManager</li>
</ul>
</li>
<li><p>到底什么是Binder</p>
<ul>
<li>通常意义下，Binder指的是一种通信机制</li>
<li>对于Server进程来说，Binder指的是Binder本地对象/对于Client来说，Binder指的是Binder代理对象</li>
<li>对于传输过程而言，Binder是可以进行跨进程传递的对象</li>
</ul>
</li>
</ol>
<h3 id="三-Aidl"><a href="#三-Aidl" class="headerlink" title="三. Aidl"></a>三. Aidl</h3>]]></content>
      
        <categories>
            
            <category> 面试 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
